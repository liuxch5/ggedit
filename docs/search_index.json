[
["index.html", "The ggedit gitbook Preface", " The ggedit gitbook Jonathan Sidi 2020-06-01 Preface ggedit is an R package that is used to facilitate ggplot formatting. With ggedit, R users of all experience levels can easily move from creating ggplots to refining aesthetic details, all while maintaining portability for further reproducible research and collaboration. ggedit is run from an R console or as a reactive object in any Shiny application. The user inputs a ggplot object or a list of objects. The application populates Bootstrap modals with all of the elements found in each layer, scale, and theme of the ggplot objects. The user can then edit these elements and interact with the plot as changes occur. During editing, a comparison of the script is logged, which can be directly copied and shared. The application output is a nested list containing the edited layers, scales, and themes in both object and script form, so you can apply the edited objects independent of the original plot using regular ggplot2 grammar. Why does it matter? ggedit promotes efficient collaboration. You can share your plots with team members to make formatting changes, and they can then send any objects they’ve edited back to you for implementation. No more email chains to change a circle to a triangle! Short clip from rstudio::conf 2017 (13:35-19:35) Lightning Talks - Users - RStudio "],
["installation.html", "Chapter 1 Installation ", " Chapter 1 Installation "],
["cran.html", "1.1 CRAN", " 1.1 CRAN The CRAN package homepage install.packages(&#39;ggedit&#39;) For a quick example, run the following: library(&#39;ggedit&#39;) library(ggplot2) p &lt;- ggplot(mtcars, aes(x = hp, y = wt)) + geom_point() + geom_smooth() p2 &lt;- ggedit(p) names(p2) # will show you which objects are available. plot(p2) # shows the updated plot (it is available in the first element of p2) "],
["dev.html", "1.2 DEV", " 1.2 DEV The package is currently under continuous development for the most up to date version run the script below. The github package homepage remotes::install_github(&quot;yonicd/ggedit&quot;) "],
["current-development.html", "Chapter 2 Current Development", " Chapter 2 Current Development Download current dev source file - ggedit_0.3.1 "],
["enhancements.html", "2.1 Enhancements", " 2.1 Enhancements replaced mutate_each with mutate_all to be compatible with new dplyr release. can pass functions into stat_summary, eg stat_summary(fun.y=mean_sd, geom='point') data.frames in layers are embedded as structures in verbose outputs, e.g. geom_point(data=mtcars, aes(cyl, mpg)) will return [1] &quot;geom_point(mapping=aes(x=cyl,y=mpg), data=structure(list(mpg = c(21, 21, 22.8, 21.4, 18.7, 18.1, 14.3, ... &lt;truncated&gt; "],
["bug-fix.html", "2.2 Bug Fix", " 2.2 Bug Fix Functionality added for aesthetic set to NULL, ie aes(group=NULL) example plot plot &lt;- iris%&gt;% ggplot(aes(x=cut(Sepal.Width,2),y=Sepal.Width)) + aes(colour=Species,group=Species)+ geom_point(alpha = 0.5,shape = 16, size = 1) + geom_boxplot(aes(group=NULL), varwidth = FALSE,notch = FALSE, show.legend = TRUE)+ stat_summary(fun.y = &#39;median&#39;, geom = &quot;line&quot;)+ theme_bw(base_size = 16) + theme(legend.position = &quot;bottom&quot;, legend.box = &quot;vertical&quot;, legend.direction = &quot;horizontal&quot;, axis.text.x = ggplot2::element_text(angle = 90,hjust = 1, vjust = 0.5), legend.title = element_blank()) ggedit(plot) "],
["limitations.html", "Chapter 3 Limitations ", " Chapter 3 Limitations "],
["layers.html", "3.1 Layers", " 3.1 Layers geom_text: family is not currently open to change non colour aesthetics of numeric inputs are not currently supported, e.g.: iris%&gt;%ggplot(aes(x=Sepal.Length,y=Sepal.Width))+ geom_point()+ geom_text(aes(label=Species,size=Sepal.Length)) "],
["themes.html", "3.2 Themes", " 3.2 Themes margin,arrow are not currently available to edit "],
["deploying.html", "Chapter 4 Deploying", " Chapter 4 Deploying from the console: ggedit(p) from the addin toolbar: highlight script of a plot object on the source editor window of RStudio and run from toolbar. Shiny: use the Shiny module syntax to call the ggEdit UI elements. server: callModule(ggEdit,'pUI',obj=reactive(p)) ui: ggEditUI('pUI') "],
["console.html", "4.1 Console", " 4.1 Console To run ggedit all you need is a compiled ggplot plot object ggedit(p,...) the following arguments can be passed in to the ellipses verbose logical to control if the output includes script for layers and themes calls for parsing to create objects (default, verbose=TRUE) showDefaults toggle to control if the verbose output shows all the input arguments passed to the proto object (if verbose==FALSE then ignored) width,height dimensions of the renderPlot where the active plot is displayed viewer shiny viewer options. It can be either paneViewer (default with minHeight=1000), dialogViewer, browserViewer "],
["addin.html", "4.2 Addin", " 4.2 Addin To launch the Shiny gadget from the addin menu highlight the code that creates the plot object or the plot name in the source pane of Rstudio, then click on the ggedit addin from the Addins the dropdown menu. "],
["shiny.html", "4.3 Shiny", " 4.3 Shiny Using ggedit as a Shiny module creates a self contained user interface layout that contains a ggedit interface for rendered plots created in a Shiny application. This means that you can launch as many ggedit environments as you need, replacing the static renderPlot with an interactive editable ggplot. To call the Shiny module you need a UI and server call: server: callModule(ggEdit,'pUI',obj=reactive(p)) ui: ggEditUI('pUI') Video of Shiny app example Script to reproduce the video app: library(ggedit) library(shinyAce) ui &lt;-fluidPage( conditionalPanel(&quot;input.tbPanel==&#39;b&#39;&quot;, sidebarPanel(uiOutput(&#39;x1&#39;),uiOutput(&#39;x2&#39;)) ), mainPanel( tabsetPanel(id = &#39;tbPanel&#39;, tabPanel(&#39;renderPlot/plotOutput&#39;,value = &#39;a&#39;,plotOutput(&#39;p&#39;)), tabPanel(&#39;ggEdit/ggEditUI&#39;,value = &#39;b&#39;,ggEditUI(&quot;pOut1&quot;)), tabPanel(&#39;ggEdit/ggEditUI with lists of plots&#39;,value = &#39;c&#39;,ggEditUI(&quot;pOut2&quot;)) ) ) ) server &lt;- function(input, output,session) { p1=iris%&gt;%ggplot(aes(x=Sepal.Length,y=Sepal.Width,colour=Species))+geom_point() p2=iris%&gt;%ggplot(aes(x=Sepal.Length,y=Sepal.Width,colour=Species))+geom_line()+geom_point() p3=list(p1=p1,p2=p2) output$p&lt;-renderPlot({p1}) outp1&lt;-callModule(ggEdit,&#39;pOut1&#39;,obj=reactive(list(p1=p1))) outp2&lt;-callModule(ggEdit,&#39;pOut2&#39;,obj=reactive(p3),showDefaults=T,height=300) output$x1&lt;-renderUI({ layerTxt=outp1()$UpdatedLayerCalls$p1[[1]] aceEditor(outputId = &#39;layerAce&#39;,value=layerTxt, mode = &quot;r&quot;, theme = &quot;chrome&quot;, height = &quot;100px&quot;, fontSize = 12,wordWrap = T) }) output$x2&lt;-renderUI({ themeTxt=outp1()$UpdatedThemeCalls$p1 aceEditor(outputId = &#39;themeAce&#39;,value=themeTxt, mode = &quot;r&quot;, theme = &quot;chrome&quot;, height = &quot;100px&quot;, fontSize = 12,wordWrap = T) }) } shinyApp(ui, server) "],
["navigating-the-app.html", "Chapter 5 Navigating the App", " Chapter 5 Navigating the App Once the application is running the list of plots are shown in a grid and a number of objects will appear above them. Action buttons Cancel: Returns a NULL object Done: Returns the list decribed the following chapter. Dropdown list Navigates through the plots in the input list. If the input list is a named list the names will be in the dropdown. The plot chosen is termed as the “active plot” Radio buttons The options to choose in the radio buttons are the layer names in the active plot. Links Update Plot Layer A pop up window will appear and be populated with aesthetic elements found in the layer chosen from the radio buttons. The layer is cloned using cloneLayer creating a layer independent of the original plot. If the aesthetic is a: Factor: the values will be shown in dropdown lists. Numeric: it will be shown in a slider. Factor colour/fill aesthetic: the colourPicker package will allow to choose from the full pallete of colours. Continuous colour/fill aesthetic: a dropdown list will be shown with different palletes. The first element in the list if ‘manual’. If manual is chosen then two colourPicker objects will appear and the user can choose the high and low colour manually. A colour pallete will be created using that range. Update Plot Theme A popup modal will appear populated with the theme elements found in the active plot. Each element will appear as having a value or empty depending if it was defined or not. The user can change or fill in any element with valid values and any textboxes left empty will use ggplot defaults. Update Grid Theme Copies the theme of the active plot to the other plots in the list Update Global Theme Copies the theme of the active plot to the session theme and all plots created outside of the gadget will have this theme. View Layer Code Opens an ace editor to compare the active layer initial script call and the updated script call. "],
["outputs.html", "Chapter 6 Outputs", " Chapter 6 Outputs ggedit returns a list containing 8 elements either to the global enviroment or as a reactive output in Shiny. updatedPlots List containing updated ggplot objects updatedLayers For each plot a list of updated layers (ggproto) objects Portable object updatedLayersElements For each plot a list elements and their values in each layer Can be used to update the new values in the original code updatedLayerCalls For each plot a list of scripts that can be run directly from the console to create a layer updatedThemes For each plot a list of updated theme objects Portable object If the user doesn’t edit the theme updatedThemes will not be returned updatedThemeCalls For each plot a list of scripts that can be run directly from the console to create a theme updatedScales For each plot a list of updated scales (ggproto) objects Portable object updatedScaleCalls For each plot a list of scripts that can be run directly from the console to create a scale "],
["updating-aesthetics.html", "Chapter 7 Updating Aesthetics ", " Chapter 7 Updating Aesthetics "],
["layers-1.html", "7.1 Layers", " 7.1 Layers The gadget creates a popup window which is populated by the information found in each layer. You can edit the aesthetic values found in a layer and see the changes happen in real time. You can edit the aesthetic layers while still preserving the original plot, because the changed layers are cloned from the original plot object and are independent of it. The edited layers are provided in the output as objects, so you can use the layers independent of the plot using regular ggplot2 grammar. This is a great advantage when collaborating with other people, where you can send a plot to team members to edit the layers aesthetics and they can send you back just the new layers for you to implement them. "],
["themes-1.html", "7.2 Themes", " 7.2 Themes ggedit also has a theme editor inside. You can edit any element in the theme and see the changes in real time, making the trial and error process quick and easy. Once you are satisfied with the edited theme you can apply it to other plots in the plot list with one click or even make it the session theme regardless of the gadget. As with layers, the new theme object is part of the output, making collaboration easy. "],
["verbose-outputs.html", "Chapter 8 Verbose Outputs", " Chapter 8 Verbose Outputs A new argument has been added to the ggedit call. If verbose is set to true on the ggedit call then for the: Layer output: In addition to the new ggproto object the user will also get the ggplot script that can be parsed/pasted in the console to create the same layer. Theme output: In addition to the new theme object the user will also get the ggplot script that can be parsed/pasted in the console to create the same theme. Scale output: In addition to the new scale object the user will also get the ggplot script that can be parsed/pasted in the console to create the same scale. During the editing users are able to see in real time the updates to the verbose scripts of the layers in a shinyAce window above the plot. They can copy the script directly to their clipboard to use in further analysis. "],
["default-values.html", "Chapter 9 Default Values", " Chapter 9 Default Values The default values for each element in the layer UI are the following The default class for each element in the theme UI are the following #Package Functions "],
["ggedit.html", "9.1 ggedit", " 9.1 ggedit "],
["ggedit-1.html", "9.2 ggEdit", " 9.2 ggEdit "],
["rgg.html", "9.3 rgg", " 9.3 rgg After you finish editing the plots the natural progression is to use them in the rest of the script. In ggedit there is the function rgg (remove and replace ggplot). Using this function you can chain into the original code changes to the plot without multiplying script needlessly. Specify which layer you want to remove from a plot: ggObj%&gt;%rgg('line') Provide an index to a specific layer, in instances where there are more than one layer of the same type in the plot ggObj%&gt;%rgg('line',2) Remove a layer from ggObj and replace it with a new one from the ggedit output p.out ggObj%&gt;%rgg('line',newLayer = p.out$UpdatedLayers) Remove a layer and replace it with a new one and the new theme ggObj%&gt;%rgg('line',newLayer = p.out$UpdatedLayers)+p.out$UpdatedThemes "],
["remove-geom.html", "9.4 remove_geom", " 9.4 remove_geom "],
["gggsave.html", "9.5 gggsave", " 9.5 gggsave generalized ggsave to save multiple outputs of ggplot to single file and multiple files from a single call. Plots can be saved to various graphic devices. #single file output to pdf gggsave(&#39;Rplots.pdf&#39;,plot=pList) #multiple file output to pdf gggsave(&#39;Rplots.pdf&#39;,plot=pList,onefile=F) #multiple file output to png gggsave(&#39;Rplots.png&#39;,plot=pList) "],
["compare.html", "9.6 compare", " 9.6 compare "],
["clonelayer.html", "9.7 cloneLayer", " 9.7 cloneLayer "],
["print-ggedit.html", "9.8 print.ggedit", " 9.8 print.ggedit "]
]
